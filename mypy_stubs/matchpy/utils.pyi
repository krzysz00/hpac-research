# Stubs for matchpy.utils (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import ast
from multiset import Multiset
from types import LambdaType
from typing import Any, Callable, Dict, Iterator, List, Optional, Tuple, TypeVar, NamedTuple

__all__ = [
    'fixed_integer_vector_iter', 'weak_composition_iter', 'commutative_sequence_variable_partition_iter',
    'get_short_lambda_source', 'solve_linear_diop', 'generator_chain', 'cached_property', 'slot_cached_property',
    'extended_euclid', 'base_solution_linear'
]

VariableWithCount = NamedTuple(
    'VariableWithCount', [('name', str), ('count', int), ('minimum', int), ('default', Optional[Any])]
)

def fixed_integer_vector_iter(max_vector: Tuple[int, ...], vector_sum: int) -> Iterator[Tuple[int, ...]]: ...
def weak_composition_iter(n: int, num_parts: int) -> Iterator[Tuple[int, ...]]: ...
def commutative_sequence_variable_partition_iter(values: Multiset, variables: List[VariableWithCount]) -> Iterator[Dict[str, Multiset]]: ...

class LambdaNodeVisitor(ast.NodeVisitor):
    lines: Any = ...
    last_node: Any = ...
    lambdas: Any = ...
    def __init__(self, lines) -> None: ...
    def visit(self, node): ...
    def visit_Lambda(self, node): ...
    def generic_visit(self, node): ...

def get_short_lambda_source(lambda_func: LambdaType) -> Optional[str]: ...
def extended_euclid(a: int, b: int) -> Tuple[int, int, int]: ...
def base_solution_linear(a: int, b: int, c: int) -> Iterator[Tuple[int, int]]: ...
def solve_linear_diop(total: int, *coeffs: int) -> Iterator[Tuple[int, ...]]: ...
T = TypeVar('T')
def generator_chain(initial_data: T, *factories: Callable[[T], Iterator[T]]) -> Iterator[T]: ...

class cached_property(property):
    def __init__(self, getter, slot: Optional[Any] = ...) -> None: ...
    def __get__(self, obj, cls): ...

def slot_cached_property(slot): ...
